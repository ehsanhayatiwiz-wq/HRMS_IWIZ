const mongoose = require('mongoose');

const payrollSchema = new mongoose.Schema({
  employeeId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Employee',
    required: [true, 'Employee ID is required']
  },
  month: {
    type: Number,
    required: [true, 'Month is required'],
    min: 1,
    max: 12
  },
  year: {
    type: Number,
    required: [true, 'Year is required'],
    min: 2020,
    max: 2030
  },
  // Salary breakdown
  basicSalary: {
    type: Number,
    required: [true, 'Basic salary is required'],
    min: 0
  },
  allowances: {
    housing: { type: Number, default: 0, min: 0 },
    transport: { type: Number, default: 0, min: 0 },
    meal: { type: Number, default: 0, min: 0 },
    medical: { type: Number, default: 0, min: 0 },
    other: { type: Number, default: 0, min: 0 }
  },
  overtime: {
    hours: { type: Number, default: 0, min: 0 },
    rate: { type: Number, default: 0, min: 0 },
    amount: { type: Number, default: 0, min: 0 }
  },
  deductions: {
    absent: { type: Number, default: 0, min: 0 },
    halfDay: { type: Number, default: 0, min: 0 },
    tax: { type: Number, default: 0, min: 0 },
    insurance: { type: Number, default: 0, min: 0 },
    other: { type: Number, default: 0, min: 0 }
  },
  // Calculated totals
  totalAllowances: {
    type: Number,
    default: 0,
    min: 0
  },
  totalDeductions: {
    type: Number,
    default: 0,
    min: 0
  },
  netPay: {
    type: Number,
    required: [true, 'Net pay is required'],
    min: 0
  },
  // Attendance data
  attendanceData: {
    totalDays: { type: Number, default: 0, min: 0 },
    presentDays: { type: Number, default: 0, min: 0 },
    absentDays: { type: Number, default: 0, min: 0 },
    halfDays: { type: Number, default: 0, min: 0 },
    overtimeHours: { type: Number, default: 0, min: 0 }
  },
  // Status and metadata
  status: {
    type: String,
    enum: ['draft', 'generated', 'paid'],
    default: 'draft'
  },
  generatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Admin',
    required: [true, 'Generated by admin is required']
  },
  generatedAt: {
    type: Date,
    default: Date.now
  },
  paidAt: {
    type: Date
  },
  notes: {
    type: String,
    maxlength: 500
  }
}, {
  timestamps: true
});

// Compound index to ensure unique payroll per employee per month/year
payrollSchema.index({ employeeId: 1, month: 1, year: 1 }, { unique: true });



// Compute totals before validation so required fields are present
payrollSchema.pre('validate', function(next) {
  // Calculate total allowances
  const allowances = this.allowances || {};
  this.totalAllowances = Object.values(allowances).reduce((sum, value) => sum + (Number(value) || 0), 0);
  
  // Calculate total deductions
  const deductions = this.deductions || {};
  this.totalDeductions = Object.values(deductions).reduce((sum, value) => sum + (Number(value) || 0), 0);
  
  // Calculate net pay
  const basic = Number(this.basicSalary) || 0;
  const overtimeAmount = (this.overtime && Number(this.overtime.amount)) || 0;
  this.netPay = basic + this.totalAllowances + overtimeAmount - this.totalDeductions;
  
  next();
});

// Method to calculate attendance-based deductions
payrollSchema.methods.calculateAttendanceDeductions = function(dailyRate) {
  const absentDeduction = this.attendanceData.absentDays * dailyRate;
  const halfDayDeduction = this.attendanceData.halfDays * (dailyRate / 2);
  
  this.deductions.absent = absentDeduction;
  this.deductions.halfDay = halfDayDeduction;
  
  return absentDeduction + halfDayDeduction;
};

// Method to calculate overtime
payrollSchema.methods.calculateOvertime = function(hourlyRate) {
  this.overtime.rate = hourlyRate;
  this.overtime.amount = this.attendanceData.overtimeHours * hourlyRate;
  return this.overtime.amount;
};

// Static method to generate payroll for all employees
payrollSchema.statics.generateMonthlyPayroll = async function(month, year, adminId) {
  const Employee = require('./Employee');
  const Attendance = require('./Attendance');
  
  console.log(`Generating payroll for month: ${month}, year: ${year}`);
  
  // Look for employees that are active (either status: 'active' or isActive: true)
  const employees = await Employee.find({ 
    $or: [
      { status: 'active' },
      { isActive: true }
    ]
  });
  
  console.log(`Found ${employees.length} active employees`);
  
  const savedPayrolls = [];
  
  for (const employee of employees) {
    console.log(`Processing employee: ${employee.fullName} (${employee.employeeId})`);
    
    // Check if payroll already exists for this month
    const existingPayroll = await this.findOne({ 
      employeeId: employee._id, 
      month, 
      year 
    });
    
    if (existingPayroll) {
      console.log(`Payroll already exists for ${employee.fullName} in ${month}/${year}`);
      continue; // Skip if already generated
    }
    
    // Get attendance data for the month
    const startDate = new Date(year, month - 1, 1);
    const endDate = new Date(year, month, 0);
    
    const attendanceRecords = await Attendance.find({
      userId: employee._id,
      userType: 'employee',
      date: { $gte: startDate, $lte: endDate }
    });
    
    console.log(`Found ${attendanceRecords.length} attendance records for ${employee.fullName}`);
    
    // Calculate attendance statistics
    const totalDays = endDate.getDate();
    const presentDays = attendanceRecords.filter(record => 
      record.status === 'present' || record.status === 'late' || record.status === 're-checked-in'
    ).length;
    const halfDays = attendanceRecords.filter(record => record.status === 'half-day').length;
    const absentDays = totalDays - presentDays - halfDays;
    const overtimeHours = attendanceRecords.reduce((total, record) => {
      const hours = record.totalHours || 0;
      return total + (hours > 8 ? hours - 8 : 0);
    }, 0);
    
    // Calculate daily rate (monthly salary / working days in month)
    const workingDays = totalDays - (absentDays + halfDays);
    const monthlySalary = employee.salary / 12; // Convert annual to monthly
    const dailyRate = workingDays > 0 ? monthlySalary / workingDays : 0;
    const hourlyRate = dailyRate / 8; // Assuming 8-hour workday
    
    // Create payroll record
    const payroll = new this({
      employeeId: employee._id,
      month,
      year,
      basicSalary: monthlySalary, // Monthly basic salary
      allowances: {
        housing: monthlySalary * 0.1, // 10% housing allowance
        transport: 500, // Fixed transport allowance
        meal: 300, // Fixed meal allowance
        medical: monthlySalary * 0.05, // 5% medical allowance
        other: 0
      },
      overtime: {
        hours: overtimeHours,
        rate: hourlyRate,
        amount: overtimeHours * hourlyRate
      },
      deductions: {
        absent: absentDays * dailyRate,
        halfDay: halfDays * (dailyRate / 2),
        tax: monthlySalary * 0.1, // 10% tax
        insurance: monthlySalary * 0.05, // 5% insurance
        other: 0
      },
      attendanceData: {
        totalDays,
        presentDays,
        absentDays,
        halfDays,
        overtimeHours
      },
      generatedBy: adminId,
      status: 'generated'
    });
    
    // Use save() to trigger pre-save middleware that calculates totals/netPay
    const saved = await payroll.save();
    console.log(`Generated payroll for ${employee.fullName}: Net Pay Rs ${saved.netPay}`);
    savedPayrolls.push(saved);
  }
  
  console.log(`Successfully generated ${savedPayrolls.length} payroll records`);
  return savedPayrolls;
};

module.exports = mongoose.model('Payroll', payrollSchema);
