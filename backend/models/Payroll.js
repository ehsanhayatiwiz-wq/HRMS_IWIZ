const mongoose = require('mongoose');

const payrollSchema = new mongoose.Schema({
  employeeId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Employee',
    required: [true, 'Employee ID is required']
  },
  month: {
    type: Number,
    required: [true, 'Month is required'],
    min: 1,
    max: 12
  },
  year: {
    type: Number,
    required: [true, 'Year is required'],
    min: 2020,
    max: 2030
  },
  // Salary breakdown
  basicSalary: {
    type: Number,
    required: [true, 'Basic salary is required'],
    min: 0
  },
  allowances: {
    housing: { type: Number, default: 0, min: 0 },
    transport: { type: Number, default: 0, min: 0 },
    meal: { type: Number, default: 0, min: 0 },
    medical: { type: Number, default: 0, min: 0 },
    other: { type: Number, default: 0, min: 0 }
  },
  overtime: {
    hours: { type: Number, default: 0, min: 0 },
    rate: { type: Number, default: 0, min: 0 },
    amount: { type: Number, default: 0, min: 0 }
  },
  deductions: {
    absent: { type: Number, default: 0, min: 0 },
    halfDay: { type: Number, default: 0, min: 0 },
    tax: { type: Number, default: 0, min: 0 },
    insurance: { type: Number, default: 0, min: 0 },
    other: { type: Number, default: 0, min: 0 }
  },
  // Calculated totals
  totalAllowances: {
    type: Number,
    default: 0,
    min: 0
  },
  totalDeductions: {
    type: Number,
    default: 0,
    min: 0
  },
  netPay: {
    type: Number,
    required: [true, 'Net pay is required'],
    min: 0
  },
  // Attendance data
  attendanceData: {
    totalDays: { type: Number, default: 0, min: 0 },
    presentDays: { type: Number, default: 0, min: 0 },
    absentDays: { type: Number, default: 0, min: 0 },
    halfDays: { type: Number, default: 0, min: 0 },
    overtimeHours: { type: Number, default: 0, min: 0 }
  },
  // Status and metadata
  status: {
    type: String,
    enum: ['draft', 'generated', 'paid'],
    default: 'draft'
  },
  generatedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Admin',
    required: [true, 'Generated by admin is required']
  },
  generatedAt: {
    type: Date,
    default: Date.now
  },
  paidAt: {
    type: Date
  },
  notes: {
    type: String,
    maxlength: 500
  }
}, {
  timestamps: true
});

// Compound index to ensure unique payroll per employee per month/year
payrollSchema.index({ employeeId: 1, month: 1, year: 1 }, { unique: true });



// Compute totals before validation so required fields are present
payrollSchema.pre('validate', function(next) {
  // Calculate total allowances
  const allowances = this.allowances || {};
  this.totalAllowances = Object.values(allowances).reduce((sum, value) => sum + (Number(value) || 0), 0);
  
  // Calculate total deductions
  const deductions = this.deductions || {};
  this.totalDeductions = Object.values(deductions).reduce((sum, value) => sum + (Number(value) || 0), 0);
  
  // Calculate net pay
  const basic = Number(this.basicSalary) || 0;
  const overtimeAmount = (this.overtime && Number(this.overtime.amount)) || 0;
  this.netPay = basic + this.totalAllowances + overtimeAmount - this.totalDeductions;
  
  next();
});

// Method to calculate attendance-based deductions
payrollSchema.methods.calculateAttendanceDeductions = function(dailyRate) {
  const absentDeduction = this.attendanceData.absentDays * dailyRate;
  const halfDayDeduction = this.attendanceData.halfDays * (dailyRate / 2);
  
  this.deductions.absent = absentDeduction;
  this.deductions.halfDay = halfDayDeduction;
  
  return absentDeduction + halfDayDeduction;
};

// Method to calculate overtime
payrollSchema.methods.calculateOvertime = function(hourlyRate) {
  this.overtime.rate = hourlyRate;
  this.overtime.amount = this.attendanceData.overtimeHours * hourlyRate;
  return this.overtime.amount;
};

// Static method to generate payroll for all employees
payrollSchema.statics.generatePayroll = async function(month, year) {
  try {
    // Check if payroll already exists for this month/year
    const existingPayrolls = await this.find({ month, year });
    if (existingPayrolls.length > 0) {
      throw new Error(`Payroll for ${month}/${year} already exists`);
    }

    // Get all active employees
    const Employee = mongoose.model('Employee');
    const employees = await Employee.find({ isActive: true, status: 'active' });

    if (employees.length === 0) {
      throw new Error('No active employees found');
    }

    const savedPayrolls = [];

    for (const employee of employees) {
      try {
        // Check if payroll already exists for this employee
        const existingPayroll = await this.findOne({
          employeeId: employee._id,
          month,
          year
        });

        if (existingPayroll) {
          continue; // Skip if payroll already exists
        }

        // Get attendance records for the month
        const Attendance = mongoose.model('Attendance');
        const startDate = new Date(year, month - 1, 1);
        const endDate = new Date(year, month, 0);

        const attendanceRecords = await Attendance.find({
          userId: employee._id,
          userType: 'employee',
          date: {
            $gte: startDate,
            $lte: endDate
          }
        });

        // Calculate working days and hours
        const workingDays = attendanceRecords.filter(att => 
          att.status === 'present' || att.status === 'late'
        ).length;

        const totalHours = attendanceRecords.reduce((sum, att) => 
          sum + (att.totalHours || 0), 0
        );

        // Calculate basic salary components
        const basicSalary = employee.salary || 0;
        const workingDaysInMonth = new Date(year, month, 0).getDate();
        const dailyRate = basicSalary / workingDaysInMonth;
        const earnedSalary = dailyRate * workingDays;

        // Calculate allowances
        const houseRentAllowance = basicSalary * 0.4; // 40% of basic
        const medicalAllowance = basicSalary * 0.1; // 10% of basic
        const conveyanceAllowance = 1500; // Fixed amount

        // Calculate deductions
        const providentFund = basicSalary * 0.12; // 12% of basic
        const tax = Math.max(0, (earnedSalary - 500000) * 0.05); // 5% tax above 5L
        const insurance = basicSalary * 0.05; // 5% of basic

        // Calculate net pay
        const grossSalary = earnedSalary + houseRentAllowance + medicalAllowance + conveyanceAllowance;
        const totalDeductions = providentFund + tax + insurance;
        const netPay = grossSalary - totalDeductions;

        // Create payroll record
        const payroll = new this({
          employeeId: employee._id,
          month,
          year,
          basicSalary: earnedSalary,
          allowances: {
            houseRent: houseRentAllowance,
            medical: medicalAllowance,
            conveyance: conveyanceAllowance
          },
          deductions: {
            providentFund,
            tax,
            insurance
          },
          workingDays,
          totalHours,
          grossSalary,
          netPay,
          status: 'pending'
        });

        const saved = await payroll.save();
        savedPayrolls.push(saved);
      } catch (error) {
        // Log error but continue with other employees
        console.error(`Error processing payroll for employee ${employee.fullName}:`, error);
      }
    }

    return savedPayrolls;
  } catch (error) {
    console.error('Error generating payroll:', error);
    throw error;
  }
};

module.exports = mongoose.model('Payroll', payrollSchema);
