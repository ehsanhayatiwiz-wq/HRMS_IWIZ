import React, { useState, useEffect } from 'react';
import { FiDownload, FiCalendar, FiEye } from 'react-icons/fi';
import Button from '../components/common/Button';
import api from '../services/api';
import { toast } from 'react-toastify';
import { formatCurrency } from '../utils/helpers';
// Using native Date methods instead of moment.js for better performance
import { useAuth } from '../contexts/AuthContext';
import './EmployeePayroll.css';

const EmployeePayroll = () => {
  const [payrolls, setPayrolls] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [selectedPayroll, setSelectedPayroll] = useState(null);
  const [showDetails, setShowDetails] = useState(false);
  
  const { user } = useAuth();

  const fetchPayrollData = async () => {
    try {
      setLoading(true);
      // Add cache-busting to ensure fresh data
      const timestamp = new Date().getTime();
      const response = await api.get(`/payroll/${user.id}?page=${currentPage}&limit=12&_t=${timestamp}`);
      setPayrolls(response.data.data.payrolls);
      setTotalPages(response.data.data.pagination.totalPages);
    } catch (error) {
      // Error fetching payroll data
      toast.error('Failed to load payroll data');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPayrollData();
  }, [user.id, currentPage, fetchPayrollData]);

  const downloadSalarySlip = async (payrollId) => {
    try {
      const response = await api.get(`/payroll/${payrollId}/download`, {
        responseType: 'blob'
      });
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `salary_slip_${payrollId}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      
      toast.success('Salary slip downloaded successfully');
    } catch (error) {
      // Error downloading salary slip
      toast.error('Failed to download salary slip');
    }
  };

  const viewPayrollDetails = (payroll) => {
    setSelectedPayroll(payroll);
    setShowDetails(true);
  };

  const closeDetails = () => {
    setShowDetails(false);
    setSelectedPayroll(null);
  };

  const getMonthName = (month) => {
    return new Date(2024, month - 1, 1).toLocaleDateString('en-US', { month: 'long' });
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'paid':
        return '#28a745';
      case 'generated':
        return '#17a2b8';
      case 'draft':
        return '#ffc107';
      default:
        return '#6c757d';
    }
  };

  return (
    <div className="employee-payroll">
      <div className="page-header">
        <h2>My Payroll</h2>
        <p>View and download your salary slips</p>
      </div>

      {loading ? (
        <div className="loading">Loading your payroll data...</div>
      ) : payrolls.length === 0 ? (
        <div className="empty-state">
          <FiCalendar className="empty-icon" />
          <h3>No Payroll Records Found</h3>
          <p>Your payroll records will appear here once they are generated by the HR department.</p>
        </div>
      ) : (
        <div className="payroll-content">
          <div className="payroll-list">
            <div className="list-header">
              <h3>Payroll History</h3>
              <p>Showing {payrolls.length} records</p>
            </div>

            <div className="payroll-cards">
              {payrolls.map((payroll) => (
                <div key={payroll.id || payroll._id} className="payroll-card">
                  <div className="card-header">
                    <div className="month-year">
                      <FiCalendar />
                      <span>{getMonthName(payroll.month)} {payroll.year}</span>
                    </div>
                    <div 
                      className="status-indicator"
                      style={{ backgroundColor: getStatusColor(payroll.status) }}
                    >
                      {payroll.status}
                    </div>
                  </div>

                  <div className="card-body">
                    <div className="salary-info">
                      <div className="net-pay">
                        <span className="label">Net Pay</span>
                        <span className="amount">{formatCurrency(payroll.netPay)}</span>
                      </div>
                      
                      <div className="salary-breakdown">
                        <div className="breakdown-item">
                          <span>Basic Salary</span>
                          <span>{formatCurrency(payroll.basicSalary)}</span>
                        </div>
                        <div className="breakdown-item">
                          <span>Allowances</span>
                          <span>{formatCurrency(payroll.totalAllowances)}</span>
                        </div>
                        <div className="breakdown-item">
                          <span>Deductions</span>
                          <span>-{formatCurrency(payroll.totalDeductions)}</span>
                        </div>
                        {payroll.overtime?.amount > 0 && (
                          <div className="breakdown-item overtime">
                            <span>Overtime</span>
                            <span>+{formatCurrency(payroll.overtime.amount)}</span>
                          </div>
                        )}
                      </div>
                    </div>

                    <div className="attendance-summary">
                      <h4>Attendance Summary</h4>
                      <div className="attendance-grid">
                        <div className="attendance-item">
                          <span>Present Days</span>
                          <span>{payroll.attendanceData?.presentDays || 0}</span>
                        </div>
                        <div className="attendance-item">
                          <span>Absent Days</span>
                          <span>{payroll.attendanceData?.absentDays || 0}</span>
                        </div>
                        <div className="attendance-item">
                          <span>Half Days</span>
                          <span>{payroll.attendanceData?.halfDays || 0}</span>
                        </div>
                        <div className="attendance-item">
                          <span>Overtime Hours</span>
                          <span>{payroll.attendanceData?.overtimeHours || 0}h</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="card-actions" style={{ display: 'flex', gap: 12 }}>
                    <Button variant="secondary" onClick={() => viewPayrollDetails(payroll)} icon={<FiEye />}>
                      View Details
                    </Button>
                    <Button variant="primary" onClick={() => downloadSalarySlip(payroll.id || payroll._id)} icon={<FiDownload />}>
                      Download Slip
                    </Button>
                  </div>
                </div>
              ))}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="pagination">
                <button
                  className="btn btn-secondary"
                  disabled={currentPage === 1}
                  onClick={() => setCurrentPage(prev => prev - 1)}
                >
                  Previous
                </button>
                <span>Page {currentPage} of {totalPages}</span>
                <button
                  className="btn btn-secondary"
                  disabled={currentPage === totalPages}
                  onClick={() => setCurrentPage(prev => prev + 1)}
                >
                  Next
                </button>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Payroll Details Modal */}
      {showDetails && selectedPayroll && (
        <div className="modal-overlay" onClick={closeDetails}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Payroll Details - {getMonthName(selectedPayroll.month)} {selectedPayroll.year}</h3>
              <button className="modal-close" onClick={closeDetails}>
                Ã—
              </button>
            </div>
            
            <div className="modal-body">
              <div className="details-section">
                <h4>Salary Breakdown</h4>
                <div className="details-grid">
                  <div className="detail-item">
                    <span>Basic Salary</span>
                    <span>{formatCurrency(selectedPayroll.basicSalary)}</span>
                  </div>
                  
                  <div className="detail-item">
                    <span>Housing Allowance</span>
                    <span>{formatCurrency(selectedPayroll.allowances?.housing)}</span>
                  </div>
                  
                  <div className="detail-item">
                    <span>Transport Allowance</span>
                    <span>{formatCurrency(selectedPayroll.allowances?.transport)}</span>
                  </div>
                  
                  <div className="detail-item">
                    <span>Meal Allowance</span>
                    <span>{formatCurrency(selectedPayroll.allowances?.meal)}</span>
                  </div>
                  
                  <div className="detail-item">
                    <span>Medical Allowance</span>
                    <span>{formatCurrency(selectedPayroll.allowances?.medical)}</span>
                  </div>
                  
                  <div className="detail-item total">
                    <span>Total Allowances</span>
                    <span>{formatCurrency(selectedPayroll.totalAllowances)}</span>
                  </div>
                </div>
              </div>

              <div className="details-section">
                <h4>Deductions</h4>
                <div className="details-grid">
                  <div className="detail-item">
                    <span>Absent Days</span>
                    <span>-{formatCurrency(selectedPayroll.deductions?.absent)}</span>
                  </div>
                  
                  <div className="detail-item">
                    <span>Half Days</span>
                    <span>-{formatCurrency(selectedPayroll.deductions?.halfDay)}</span>
                  </div>
                  
                  <div className="detail-item">
                    <span>Tax</span>
                    <span>-{formatCurrency(selectedPayroll.deductions?.tax)}</span>
                  </div>
                  
                  <div className="detail-item">
                    <span>Insurance</span>
                    <span>-{formatCurrency(selectedPayroll.deductions?.insurance)}</span>
                  </div>
                  
                  <div className="detail-item total">
                    <span>Total Deductions</span>
                    <span>-{formatCurrency(selectedPayroll.totalDeductions)}</span>
                  </div>
                </div>
              </div>

              {selectedPayroll.overtime?.amount > 0 && (
                <div className="details-section">
                  <h4>Overtime</h4>
                  <div className="details-grid">
                    <div className="detail-item">
                      <span>Overtime Hours</span>
                      <span>{selectedPayroll.overtime.hours} hours</span>
                    </div>
                    <div className="detail-item">
                      <span>Overtime Rate</span>
                      <span>{formatCurrency(selectedPayroll.overtime.rate, { withSymbol: false })}/hour</span>
                    </div>
                    <div className="detail-item total">
                      <span>Overtime Amount</span>
                      <span>+{formatCurrency(selectedPayroll.overtime.amount)}</span>
                    </div>
                  </div>
                </div>
              )}

              <div className="details-section">
                <h4>Final Calculation</h4>
                <div className="final-calculation">
                  <div className="calculation-item">
                    <span>Basic Salary</span>
                    <span>{formatCurrency(selectedPayroll.basicSalary)}</span>
                  </div>
                  <div className="calculation-item">
                    <span>+ Total Allowances</span>
                    <span>+{formatCurrency(selectedPayroll.totalAllowances)}</span>
                  </div>
                  {selectedPayroll.overtime?.amount > 0 && (
                    <div className="calculation-item">
                      <span>+ Overtime</span>
                      <span>+{formatCurrency(selectedPayroll.overtime.amount)}</span>
                    </div>
                  )}
                  <div className="calculation-item">
                    <span>- Total Deductions</span>
                    <span>-{formatCurrency(selectedPayroll.totalDeductions)}</span>
                  </div>
                  <div className="calculation-item final">
                    <span>Net Pay</span>
                    <span>{formatCurrency(selectedPayroll.netPay)}</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="modal-footer" style={{ display: 'flex', gap: 12 }}>
              <Button variant="neutral" onClick={closeDetails}>Close</Button>
              <Button variant="primary" onClick={() => downloadSalarySlip(selectedPayroll.id || selectedPayroll._id)} icon={<FiDownload />}>
                Download PDF
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EmployeePayroll;
